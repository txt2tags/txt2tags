<!doctype html><html><meta charset=UTF-8><title>TXT2TAGS SAMPLE</title>
<section><pre>================================================================================




                              +-----------------+                               
                              | TXT2TAGS SAMPLE |                               
                              +-----------------+                               




                               +----------------+                               
                               | Aurelio Jargas |                               
                               +----------------+                               




                                 +------------+                                 
                                 | 03/09/2012 |                                 
                                 +------------+                                 




================================================================================</pre></section>
<section><pre>================================================================================

                                TXT2TAGS SAMPLE                                 

================================================================================


 This text is before the introduction.

 But it's OK.
















================================================================================</pre></section>
<section><pre>================================================================================

                                  Introduction                                  

================================================================================

 Welcome to the txt2tags sample file.

 Here you have examples and a brief explanation of all
 marks.

 The first 3 lines of the this file are used as headers,
 on the following format:

   line1: document title
   line2: author name, email
   line3: date, version

 Lines with balanced equal signs = around are titles.







================================================================================</pre></section>
<section><pre>================================================================================

                             Fonts and Beautifiers                              

================================================================================

 We have two sets of fonts:

 The NORMAL type that can be improved with beautifiers.

 The TYPEWRITER type that uses monospaced font for
 pre-formatted text.

 We will now enter on a subtitle...


 Beautifiers
 ===========

 The text marks for beautifiers are simple, just as you
 type on a plain text email message.

 We use double *, /, - and _ to represent <b>bold</b>,
 <i>italic</i>, <s>strike</s> and <u>underline</u>.


--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                             Fonts and Beautifiers                              

================================================================================

 The <b><i>bold italic</i></b> style is also supported as a
 combination.


 Pre-Formatted Text
 ==================

 We can put a code sample or other pre-formatted text:

     here    is     pre-formatted
   //marks// are  **not**  ``interpreted``

 And also, it's easy to put a one line pre-formatted
 text:

   prompt$ ls /etc

 Or use pre-formatted inside sentences.


--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                             Fonts and Beautifiers                              

================================================================================


 More Cosmetics
 ==============

 Special entities like email (<a
 href="mailto:duh@somewhere.com">duh@somewhere.com</a>) and
 URL (<a href="http://www.duh.com">http://www.duh.com</a>) are detected
 automagically,
 as long as the horizontal line:

 ------------------------------------------------------------------------------

 ^ thin or large v

 ==============================================================================

 You can also specify an <a href="http://duh.org">explicit link</a>
 or an <a href="mailto:duh@somewhere.com">explicit email</a> with label.


--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                             Fonts and Beautifiers                              

================================================================================

 And remember,

                +----------------------------------------------+
                | A TAB in front of the line does a quotation. |
                +----------------------------------------------+

                    +-------------------------------------+
                    | More TABs, more depth (if allowed). |
                    +-------------------------------------+


 Nice.








================================================================================</pre></section>
<section><pre>================================================================================

                                     Lists                                      

================================================================================

 A list of items is natural, just putting a <b>dash</b> or
 a <b>plus</b> at the beginning of the line.


 Plain List
 ==========

 The dash is the default list identifier. For sublists,
 just add <b>spaces</b> at the beginning of the line. More
 spaces, more sublists.










--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                                     Lists                                      

================================================================================

                        +------------------------------+                       
                        | * Earth                      |                       
                        |   * America                  |                       
                        |     * South America          |                       
                        |       * Brazil               |                       
                        |         * How deep can I go? |                       
                        |   * Europe                   |                       
                        |     * Lots of countries      |                       
                        | * Mars                       |                       
                        |   * Who knows?               |                       
                        +------------------------------+                       

 The list ends with <b>two</b> consecutive blank lines.


 Numbered List
 =============



--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                                     Lists                                      

================================================================================


 The same rules as the plain list, just a different
 identifier (plus).

                           +-----------------------+                           
                           | 1. one                |                           
                           | 2. two                |                           
                           | 3. three              |                           
                           |   * mixed lists!      |                           
                           |   * what a mess       |                           
                           |     1. counting again |                           
                           |     2. ...            |                           
                           | 4. four               |                           
                           +-----------------------+                           

 Definition List
 ===============



--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                                     Lists                                      

================================================================================


 The definition list identifier is a colon, followed by
 the term. The term contents is placed on the next line.

                           +------------------------+                          
                           | orange                 |                          
                           |   a yellow fruit       |                          
                           | apple                  |                          
                           |   a green or red fruit |                          
                           | other fruits           |                          
                           |   * wee!               |                          
                           |   * mixing lists       |                          
                           |     1. again!          |                          
                           |     2. and again!      |                          
                           +------------------------+                          





================================================================================</pre></section>
<section><pre>================================================================================

                                     Tables                                     

================================================================================


 Use pipes to compose table rows and cells.
 Double pipe at the line beginning starts a heading row.
 Natural spaces specify each cell alignment.

                    +-----------+-------------+------------+                    
                    | heading 1 |  heading 2  |  heading 3 |                    
                    +===========+=============+============+                    
                    | cell 1.1  |  cell 1.2   |   cell 1.3 |                    
                    +-----------+-------------+------------+                    
                    | cell 2.1  |  cell 2.2   |   cell 2.3 |                    
                    +-----------+-------------+------------+                    

 Without the last pipe, no border:






--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                                     Tables                                     

================================================================================

                    +-----------+-------------+------------+                    
                    | heading 1 |  heading 2  |  heading 3 |                    
                    +-----------+-------------+------------+                    
                    | cell 1.1  |  cell 1.2   |   cell 1.3 |                    
                    | cell 2.1  |  cell 2.2   |   cell 2.3 |                    
                    +-----------+-------------+------------+                    














================================================================================</pre></section>
<section><pre>================================================================================

                                Special Entities                                

================================================================================

 Because things were too simple.


 Images
 ======

 The image mark is as simple as it can be: [filename].

                       <img src="img/photo.jpg" alt=""/>

 And with some targets the image is linkable :

                       <a href="http://www.txt2tags.org"><img
 src="img/photo.jpg" alt=""/></a>

           +-------------------------------------------------------+           
           | * The filename must end in PNG, JPG, GIF, or similar. |           
           | * No spaces inside the brackets!                      |           
           +-------------------------------------------------------+           

--------------------------------------------------------------------------------</pre></section>
<section><pre>================================================================================

                                Special Entities                                

================================================================================


 Other
 =====

 When the target needs, special chars like &lt;, &gt; and &amp;
 are escaped.

 The handy %%date macro expands to the current date.

 So today is 20120309 on the ISO YYYYMMDD format.

 You can also specify the date format with the %? flags,
 as %%date(%m-%d-%Y) which gives: 03-09-2012.

 That's all for now.

 ------------------------------------------------------------------------------

 <img src="img/t2tpowered.png" alt=""/> (<a href="sample.t2t">sample.t2t</a>)

================================================================================</pre></section>
</html>
<style>
  html { background-color: black; }
  body { background-color: white; }
  /* A section is a slide. It's size is 800x600, and this will never change */
  section {
      font-family: monospace;
      font-size: 18px;
  }

  img, video {
    width: 800px;
    height: 600px;
    position: absolute;
    top: 0;
    background-color: black;
    z-index: -1;
  }

/*  footer {
    position: absolute;
    bottom: 10px;
    right: 20px;
  } */

  /* Transition effect */
  /* Feel free to change the transition effect for original
     animations. See here:
     https://developer.mozilla.org/en/CSS/CSS_transitions
     How to use CSS3 Transitions: */
  section {
      -moz-transition: top 400ms linear 0s;
      -webkit-transition: top 400ms linear 0s;
      -ms-transition: top 400ms linear 0s;
      transition: top 400ms linear 0s;
  }

  /* Before */
  section { left: -150%; }
  /* Now */
  section[aria-selected] { left: 0; }
  /* After */
  section[aria-selected] ~ section { left: +150%; }

  /* Incremental elements */

  /* By default, visible */
  .incremental > * { opacity: 1; }

  /* The current item */
  .incremental > *[aria-selected] { color: red; opacity: 1; }

  /* The items to-be-selected */
  .incremental > *[aria-selected] ~ * { opacity: 0.2; }

</style>

 <!-- {{{{ dzslides core
#
#
#     __  __  __       .  __   ___  __
#    |  \  / /__` |    | |  \ |__  /__`
#    |__/ /_ .__/ |___ | |__/ |___ .__/ core :€
#
#
# The following block of code is not supposed to be edited.
# But if you want to change the behavior of these slides,
# feel free to hack it!
#
-->

<!-- Default Style -->
<style>
  * { margin: 0; padding: 0; }
  details { display: none; }
  body {
    width: 800px; height: 600px;
    margin-left: -400px; margin-top: -300px;
    position: absolute; top: 50%; left: 50%;
    overflow: hidden;
  }
  section {
    position: absolute;
    pointer-events: none;
    width: 100%; height: 100%;
  }
  section[aria-selected] { pointer-events: auto; }
  html { overflow: hidden; }
  body { display: none; }
  body.loaded { display: block; }
  .incremental {visibility: hidden; }
  .incremental[active] {visibility: visible; }
</style>

<script>
  var Dz = {
    remoteWindows: [],
    idx: -1,
    step: 0,
    slides: null,
    params: {
      autoplay: "1"
    }
  };

  Dz.init = function() {
    document.body.className = "loaded";
    this.slides = $$("body > section");
    this.setupParams();
    this.onhashchange();
    this.setupTouchEvents();
    this.onresize();
  }
  
  Dz.setupParams = function() {
    var p = window.location.search.substr(1).split('&');
    p.forEach(function(e, i, a) {
      var keyVal = e.split('=');
      Dz.params[keyVal[0]] = decodeURIComponent(keyVal[1]);
    });
  }

  Dz.onkeydown = function(aEvent) {
    // Don't intercept keyboard shortcuts
    if (aEvent.altKey
      || aEvent.ctrlKey
      || aEvent.metaKey
      || aEvent.shiftKey) {
      return;
    }
    if ( aEvent.keyCode == 37 // left arrow
      || aEvent.keyCode == 38 // up arrow
      || aEvent.keyCode == 33 // page up
    ) {
      aEvent.preventDefault();
      this.back();
    }
    if ( aEvent.keyCode == 39 // right arrow
      || aEvent.keyCode == 40 // down arrow
      || aEvent.keyCode == 34 // page down
    ) {
      aEvent.preventDefault();
      this.forward();
    }
    if (aEvent.keyCode == 35) { // end
      aEvent.preventDefault();
      this.goEnd();
    }
    if (aEvent.keyCode == 36) { // home
      aEvent.preventDefault();
      this.goStart();
    }
    if (aEvent.keyCode == 32) { // space
      aEvent.preventDefault();
      this.toggleContent();
    }
  }

  /* Touch Events */

  Dz.setupTouchEvents = function() {
    var orgX, newX;
    var tracking = false;

    var db = document.body;
    db.addEventListener("touchstart", start.bind(this), false);
    db.addEventListener("touchmove", move.bind(this), false);

    function start(aEvent) {
      aEvent.preventDefault();
      tracking = true;
      orgX = aEvent.changedTouches[0].pageX;
    }

    function move(aEvent) {
      if (!tracking) return;
      newX = aEvent.changedTouches[0].pageX;
      if (orgX - newX > 100) {
        tracking = false;
        this.forward();
      } else {
        if (orgX - newX < -100) {
          tracking = false;
          this.back();
        }
      }
    }
  }

  /* Adapt the size of the slides to the window */

  Dz.onresize = function() {
    var db = document.body;
    var sx = db.clientWidth / window.innerWidth;
    var sy = db.clientHeight / window.innerHeight;
    var transform = "scale(" + (1/Math.max(sx, sy)) + ")";

    db.style.MozTransform = transform;
    db.style.WebkitTransform = transform;
    db.style.OTransform = transform;
    db.style.msTransform = transform;
    db.style.transform = transform;
  }


  Dz.getDetails = function(aIdx) {
    var s = $("section:nth-of-type(" + aIdx + ")");
    var d = s.$("details");
    return d ? d.innerHTML : "";
  }

  Dz.onmessage = function(aEvent) {
    var argv = aEvent.data.split(" "), argc = argv.length;
    argv.forEach(function(e, i, a) { a[i] = decodeURIComponent(e) });
    var win = aEvent.source;
    if (argv[0] === "REGISTER" && argc === 1) {
      this.remoteWindows.push(win);
      this.postMsg(win, "REGISTERED", document.title, this.slides.length);
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
      return;
    }
    if (argv[0] === "BACK" && argc === 1)
      this.back();
    if (argv[0] === "FORWARD" && argc === 1)
      this.forward();
    if (argv[0] === "START" && argc === 1)
      this.goStart();
    if (argv[0] === "END" && argc === 1)
      this.goEnd();
    if (argv[0] === "TOGGLE_CONTENT" && argc === 1)
      this.toggleContent();
    if (argv[0] === "SET_CURSOR" && argc === 2)
      window.location.hash = "#" + argv[1];
    if (argv[0] === "GET_CURSOR" && argc === 1)
      this.postMsg(win, "CURSOR", this.idx + "." + this.step);
    if (argv[0] === "GET_NOTES" && argc === 1)
      this.postMsg(win, "NOTES", this.getDetails(this.idx));
  }

  Dz.toggleContent = function() {
    // If a Video is present in this new slide, play it.
    // If a Video is present in the previous slide, stop it.
    var s = $("section[aria-selected]");
    if (s) {
      var video = s.$("video");
      if (video) {
        if (video.ended || video.paused) {
          video.play();
        } else {
          video.pause();
        }
      }
    }
  }

  Dz.setCursor = function(aIdx, aStep) {
    // If the user change the slide number in the URL bar, jump
    // to this slide.
    aStep = (aStep != 0 && typeof aStep !== "undefined") ? "." + aStep : ".0";
    window.location.hash = "#" + aIdx + aStep;
  }

  Dz.onhashchange = function() {
    var cursor = window.location.hash.split("#"),
        newidx = 1,
        newstep = 0;
    if (cursor.length == 2) {
      newidx = ~~cursor[1].split(".")[0];
      newstep = ~~cursor[1].split(".")[1];
      if (newstep > Dz.slides[newidx - 1].$$('.incremental > *').length) {
        newstep = 0;
        newidx++;
      }
    }
    if (newidx != this.idx) {
      this.setSlide(newidx);
    }
    if (newstep != this.step) {
      this.setIncremental(newstep);
    }
    for (var i = 0; i < this.remoteWindows.length; i++) {
      this.postMsg(this.remoteWindows[i], "CURSOR", this.idx + "." + this.step);
    }
  }

  Dz.back = function() {
    if (this.idx == 1 && this.step == 0) {
      return;
    }
    if (this.step == 0) {
      this.setCursor(this.idx - 1,
                     this.slides[this.idx - 2].$$('.incremental > *').length);
    } else {
      this.setCursor(this.idx, this.step - 1);
    }
  }

  Dz.forward = function() {
    if (this.idx >= this.slides.length &&
        this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
        return;
    }
    if (this.step >= this.slides[this.idx - 1].$$('.incremental > *').length) {
      this.setCursor(this.idx + 1, 0);
    } else {
      this.setCursor(this.idx, this.step + 1);
    }
  }

  Dz.goStart = function() {
    this.setCursor(1, 0);
  }

  Dz.goEnd = function() {
    var lastIdx = this.slides.length;
    var lastStep = this.slides[lastIdx - 1].$$('.incremental > *').length;
    this.setCursor(lastIdx, lastStep);
  }

  Dz.setSlide = function(aIdx) {
    this.idx = aIdx;
    var old = $("section[aria-selected]");
    var next = $("section:nth-of-type("+ this.idx +")");
    if (old) {
      old.removeAttribute("aria-selected");
      var video = old.$("video");
      if (video) {
        video.pause();
      }
    }
    if (next) {
      next.setAttribute("aria-selected", "true");
      var video = next.$("video");
      if (video && !!+this.params.autoplay) {
        video.play();
      }
    } else {
      // That should not happen
      this.idx = -1;
      // console.warn("Slide doesn't exist.");
    }
  }

  Dz.setIncremental = function(aStep) {
    this.step = aStep;
    var old = this.slides[this.idx - 1].$('.incremental > *[aria-selected]');
    if (old) {
      old.removeAttribute('aria-selected');
    }
    var incrementals = this.slides[this.idx - 1].$$('.incremental');
    if (this.step <= 0) {
      incrementals.forEach(function(aNode) {
        aNode.removeAttribute('active');
      });
      return;
    }
    var next = this.slides[this.idx - 1].$$('.incremental > *')[this.step - 1];
    if (next) {
      next.setAttribute('aria-selected', true);
      next.parentNode.setAttribute('active', true);
      var found = false;
      incrementals.forEach(function(aNode) {
        if (aNode != next.parentNode)
          if (found)
            aNode.removeAttribute('active');
          else
            aNode.setAttribute('active', true);
        else
          found = true;
      });
    } else {
      setCursor(this.idx, 0);
    }
    return next;
  }
  
  Dz.postMsg = function(aWin, aMsg) { // [arg0, [arg1...]]
    aMsg = [aMsg];
    for (var i = 2; i < arguments.length; i++)
      aMsg.push(encodeURIComponent(arguments[i]));
    aWin.postMessage(aMsg.join(" "), "*");
  }

  window.onload = Dz.init.bind(Dz);
  window.onkeydown = Dz.onkeydown.bind(Dz);
  window.onresize = Dz.onresize.bind(Dz);
  window.onhashchange = Dz.onhashchange.bind(Dz);
  window.onmessage = Dz.onmessage.bind(Dz);
</script>


<script> // Helpers
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {

      // closest thing possible to the ECMAScript 5 internal IsCallable
      // function 
      if (typeof this !== "function")
      throw new TypeError(
        "Function.prototype.bind - what is trying to be fBound is not callable"
      );

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
            return fToBind.apply( this instanceof fNOP ? this : oThis || window,
                   aArgs.concat(Array.prototype.slice.call(arguments)));
          };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();

      return fBound;
    };
  }

  var $ = (HTMLElement.prototype.$ = function(aQuery) {
    return this.querySelector(aQuery);
  }).bind(document);

  var $$ = (HTMLElement.prototype.$$ = function(aQuery) {
    return this.querySelectorAll(aQuery);
  }).bind(document);

  NodeList.prototype.forEach = function(fun) {
    if (typeof fun !== "function") throw new TypeError();
    for (var i = 0; i < this.length; i++) {
      fun.call(this, this[i]);
    }
  }

</script>
<!-- vim: set fdm=marker: }}} -->
